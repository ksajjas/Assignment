import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import java.util.List;

public class FormVerification {

    // Use @FindBy annotations for elements
    @FindBy(xpath = ".//input[@name='my-disabled']")
    private WebElement disabledInput;

    @FindBy(xpath = ".//input[@value='Readonly input' and @readonly]")
    private WebElement readonlyInput1;

    @FindBy(xpath = ".//input[@value='Readonly input'][@readonly]")
    private WebElement readonlyInput2;

    @FindBy(xpath = ".//select[@name='color']")
    private WebElement colorDropdown;

    @FindBy(xpath = ".//input[@name='name']")
    private WebElement nameField;

    @FindBy(xpath = ".//input[@name='password']")
    private WebElement passwordField;

    @FindBy(xpath = ".//button[@type='submit']")
    private WebElement submitButton;

    @FindBy(xpath = ".//div[contains(text(),'Received')]")
    private WebElement receivedText;

    public static void main(String[] args) {
        
        //Url
        String url  = "https://d3pv22lioo8876.cloudfront.net/tiptop/"
        
        // Setup WebDriver using WebDriverManager
        WebDriverManager.chromedriver().setup(); // Automatically download the latest version of chromedriver

        // Initialize WebDriver
        WebDriver driver = new ChromeDriver();
        WebDriverWait wait = new WebDriverWait(driver, 10);

        // Create the instance of FormVerification and initialize elements with PageFactory
        FormVerification formVerification = new FormVerification();
        PageFactory.initElements(driver, formVerification);

        // Open the page
        driver.get(url);

        // 1. Verify the text input element with XPath //input[@name='my-disabled'] is disabled in the form
        assert formVerification.disabledInput.getAttribute("disabled") != null : "Input is not disabled";

        // 2. Verify that the text input with value 'Readonly input' is in readonly state using 2 XPaths
        assert formVerification.readonlyInput1 != null && formVerification.readonlyInput2 != null : "Readonly input is not in readonly state";

        // 3. Verify that the dropdown field to select color has 8 elements
        Select colorDropdownSelect = new Select(formVerification.colorDropdown);
        List<WebElement> colorOptions = colorDropdownSelect.getOptions();
        assert colorOptions.size() == 8 : "Dropdown does not have 8 elements";

        // 4. Verify that the submit button is disabled when no data is entered in the Name field
        WebElement submitButton1 = formVerification.submitButton;
        assert formVerification.nameField.getAttribute("value").isEmpty() && submitButton1.getAttribute("disabled") != null :
                "Submit button should be disabled when Name field is empty";

        // 5. Verify that the submit button is enabled when both Name and Password fields are entered
        // Enter values in the Name and Password fields
        formVerification.nameField.sendKeys("Siva");
        formVerification.passwordField.sendKeys("password@");

        assert !submitButton1.getAttribute("disabled").equals("true") : "Submit button is not enabled after entering data";

        // 6. Verify that on submit of 'Submit' button, the page shows 'Received' text
        submitButton1.click();

        // Wait for the "Received" text to appear on the page
        WebElement receivedText = wait.until(ExpectedConditions.visibilityOf(formVerification.receivedText));
        assert receivedText != null : "'Received' text not displayed after submission";

        // 7. Verify that on submit of form, all the data passed to the URL
        // Extract the current URL and check the form data
        String currentUrl = driver.getCurrentUrl();
        assert currentUrl.contains("name=Siva") : "Name not passed in URL";
        assert currentUrl.contains("password=password@") : "Password not passed in URL";

        // Close the browser
        driver.quit();
    }
}
